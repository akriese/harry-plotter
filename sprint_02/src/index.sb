# %% [esm]
import * as tj from "https://cdn.skypack.dev/pin/topojson@v3.0.2-ovpHjX420lx9YlKkg1QF/mode=imports/optimized/topojson.js"
import * as d3_ from "https://cdn.skypack.dev/d3@7.6.0"
import proj from 'https://cdn.skypack.dev/proj4'
export const topojson = tj;
export const d3 = d3_;
export const proj4 = proj;
# %% [javascript]
async function fetchJson(url) {
  return fetch(url).then(response => response.json())
}

// LINREF coordinates in "ETRS89 / UTM zone 32N" (https://epsg.io/25832-1149)
var data = await fetchJson("https://raw.githubusercontent.com/akriese/harry-plotter/main/sprint_02/data/data_2021.json")

// district features https://tsb-opendata.s3.eu-central-1.amazonaws.com/lor_bezirksregionen_2021/lor_bezirksregionen_2021.geojson
// coordinates in "WGS 84 / UTM zone 33N" (https://epsg.io/32633)
// says https://www.stadtentwicklung.berlin.de/planen/basisdaten_stadtentwicklung/lor/de/download.shtml
var berlin_lor_topo = await fetchJson("https://raw.githubusercontent.com/akriese/harry-plotter/main/sprint_02/data/lor_bezirksregionen_2021.topojson")
berlin_lor_topo

# %% [javascript]
/// We define the two different coordinate systems for proj4
proj4.defs([["EPSG:32632","+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs +type=crs"],
           ["EPSG:32633", "+proj=utm +zone=33 +datum=WGS84 +units=m +no_defs +type=crs"]]);
function from32to33(coords) {
  return proj4("EPSG:32632", "EPSG:32633", coords)
}

// ... and assign each data point a new parameter 'coords' holding x AND y value
// these coordinates now match the coordinates that are used by the topojson file :)
for (i in data) {
  data[i].coords = from32to33([data[i].LINREFX, data[i].LINREFY])
}
# %% [javascript]
// Precompute list of involved per accident
for (i in data) {
  var arr = []
  for (const [key, value] of Object.entries(data[i])) {
    if (key.startsWith("Ist") && value === true) {
      arr.push(key.replace("Ist", ""))
    }
  }
  data[i].Beteiligte = arr
}

# %% [javascript]
/// Collection of functions that grab certain parts of the given data

// general function to count occurences of a category in one data property
// property: name of the property to count in
// categories: list of categories whose counts in property get returned
function countCategoryOccurences(data, property, categories) {
  var counter = {}
  for (c of categories) {
    counter[c] = 0
  }

  const propArr = data.map(accident => accident[property])
  for (p of propArr) {
    counter[p]++
  }

  return counter
}

// count graveness
function countGraveness(data) {
  return countCategoryOccurences(data, "UKATEGORIE", [1, 2, 3])
}

// count accident types
function countAccidentTypes(data) {
  return countCategoryOccurences(data, "UTYP1", [1, 2, 3, 4, 5, 6, 7])
}

// extract accident time data
// mode: one of {"single", "array", "day_arrays"} defines how the data is returned
function getDaysAndHours(data, mode="single") {
  var filtered = data.map(accident => ({ day: accident.UWOCHENTAG, hour: accident.STUNDE }));
  if (mode === "single") return filtered;
  if (mode === "array" ) {
    return {
      day: filtered.map(acc => acc.day),
      hour: filtered.map(acc => acc.hour),
    }
  }

  // else: day_arrays
  var result = {}
  for (day of [1,2,3,4,5,6,7]) {
    result[day] = []
  }

  for (p of filtered) {
    result[p.day].push(p.hour)
  }

  return result
}

// get numbers of how many accidents had e.g. cars involved
function getInvolvedNumbers(data) {
  var involved = ["IstRad", "IstPKW", "IstFuss", "IstKrad", "IstGkfz", "IstSonstige"]
  var results = {}
  for (x of involved) {
    results[x] = 0
  }

  for (accident of data) {
    for (x of involved) {
      results[x] += accident[x] ? 1 : 0
    }
  }

  return results
}
# %% [javascript]
/// Apply a filter on the overall data and return the chosen set
function filterData(data, {
  lor = undefined, // int describing the focused lor; undefined means the whole city is focused
  days = [], // list of ints, representing week days of chosen accidents; empty list means no filter
  graveness = undefined, // int describing the chosen accidents with certain graveness (1,2,3); undefined means no filter
  involved = [] // list of strings, which kind parties are involved in an accident; empty means no filter
}) {
  return data.filter(
    accident => {
      if (lor !== undefined && accident.lor !== lor) {
        return false
      }

      if (days.length != 0 && !(accident.UWOCHENTAG in days)) {
        return false
      }

      if (graveness !== undefined && accident.UKATEGORIE != graveness) {
        return false
      }

      if (involved.length != 0) {
        var skip = false
        for (inv of involved) {
          if (!accident[inv]) {
            skip = true
            break
          }
        }

        // if some required entity is not involved, we continue
        if (skip) {
          return false
        }
      }

      return true
    }
  );
}
# %% [javascript]
// trying out the filter function
function measureFiltering(filter) {
  console.time()
  var result = filterData(data, filter)
  console.timeEnd()
  console.log(result.length)
  return result
}

measureFiltering({ graveness: 1 })
measureFiltering({ graveness: 2, involved: ["IstRad", "IstKrad"] })
measureFiltering({ graveness: 2, involved: ["IstRad"], days: [1,2,5,6] })
measureFiltering({ graveness: 2, days: [1,2,5,6] })
getInvolvedNumbers(measureFiltering({ graveness: 1, involved: ["IstRad"], days: [1,2,5,6] }))
getDaysAndHours(data, mode="day_arrays")
# %% [javascript]
// trying out filters to precompute data for bar chart
getInvolvedNumbers(measureFiltering({involved: ["IstRad"]}))
countGraveness(data)
# %% [javascript]
// statemesh should work as it looks like in the bubble map example
statemesh = topojson.mesh(berlin_lor_topo, berlin_lor_topo.objects.states, (a, b) => a !== b)
# %%--- [html]
# properties:
#   top_hidden: true
# ---%%
<!-- Main div for the map svg -->
<div id="content"></div>
# %% [css]
body {
  font-family: "Helvetica Neue", Helvetica, sans-serif;
  font-size: 14px;
  color: #333;
}

div.tooltip {
  position: absolute;
  text-align: center;
  width: fit-content;
  height: fit-content;
  padding: 2px;
  font: 12px sans-serif;
  background: lightsteelblue;
  border: 0px;
  border-radius: 8px;
  pointer-events: none;
}

.axis text,
.slider text {
  font: 13px sans-serif;
}
.slider text {
  font-weight: bold;
}

/* Style of category legend text and circles */
.legend text {
  font-size: 0.8em;
  fill: black;
  font-family: sans-serif;
}

.legend circle {
  stroke: black;
  stroke-opacity: 0.5;
}
# %% [javascript]

# %%--- [javascript]
# properties:
#   collapsed: true
# ---%%
colorLegend = (selection, props) => {
  const {
    colorScale,
    circleRadius,
    spacing,
    textOffset,
    backgroundRectWidth
  } = props;

  const backgroundRect = selection.selectAll('rect')
    .data([null]);
  const n = colorScale.domain().length;
  backgroundRect.enter().append('rect')
    .merge(backgroundRect)
      .attr('x', -circleRadius * 2)
      .attr('y', -circleRadius * 2)
      .attr('rx', circleRadius * 2)
      .attr('width', backgroundRectWidth)
      .attr('height', spacing * n + circleRadius * 2)
      .attr('fill', 'white')
      .attr('opacity', 0.8);

  const groups = selection.selectAll('.legend')
    .data(colorScale.domain());
  const groupsEnter = groups
    .enter().append('g')
      .attr('class', 'legend')
      .attr('category', d => d)
      .style("opacity", 0.8);
  groupsEnter
    .merge(groups)
      .attr('transform', (d, i) =>
        `translate(0, ${i * spacing})`
      )
      .attr("cursor", "pointer");
  groups.exit().remove();

  groupsEnter.append('circle')
    .merge(groups.select('circle'))
      .attr('r', circleRadius)
      .attr('fill', colorScale);

  groupsEnter.append('text')
    .merge(groups.select('text'))
      // cut off long category names
      .text(d => d.length > 29 ? d.substr(0, 27) + '...' : d)
      .attr('dy', '0.32em')
      .attr('x', textOffset);
}
# %%--- [javascript]
# properties:
#   collapsed: true
# ---%%
// Copyright 2022 Observable, Inc.
// Released under the ISC license.
// https://observablehq.com/@d3/bubble-map
function AccidentMap(data, {
  //position = d => d, // given d in data, returns the [longitude, latitude]
  //value = () => undefined, // given d in data, returns the quantitative value
  //cat = () => undefined,
  //title, // given a datum d, returns the hover text
  scale = d3.scaleSqrt, //d3.scaleLog, // type of radius scale
  domain, // [0, max] values; input of radius scale; must start at zero
  //maxRadius = 30, // maximum radius of accidentDots
  width = 640, // outer width, in pixels
  height, // outer height, in pixels
  projection, // a D3 projection; null for pre-projected geometry
  borders, // a GeoJSON object for stroking borders
  outline = projection && projection.rotate ? {type: "Sphere"} : null, // a GeoJSON object for the background
  topo,
  backgroundFill = "#e0e0e0", // fill color for background
  backgroundStroke = "white", // stroke color for borders
  backgroundStrokeWidth, // stroke width for borders
  backgroundStrokeOpacity, // stroke width for borders
  backgroundStrokeLinecap = "round", // stroke line cap for borders
  backgroundStrokeLinejoin = "round", // stroke line join for borders
  //fill = d => d,// = "brown", // fill color for accidentDots
  fillOpacity = 0.5, // fill opacity for accidentDots
  //stroke = "white", // stroke color for accidentDots
  //strokeWidth = 0.5, // stroke width for accidentDots
  //strokeOpacity, // stroke opacity for accidentDots
  //legendX = width - maxRadius - 10,
  //legendY = height - 10,
} = {}) {
  // Compute values.
  //const I = d3.map(data, (_, i) => i);
  //const V = d3.map(data, d => data[i]); //.map(d => d == null ? NaN : +d);
  //const P = d3.map(data, d => [d.XGCSWGS84, d.YGCSWGS84]); // given d in data, returns the [longitude, latitude]
  const P = d3.map(data, d => d.coords); // given d in data, returns the [longitude, latitude]
  //const T = title == null ? null : d3.map(data, title);
  const I = d3.map(data, d => d)
  //const C = d3.map(data, d => d[1])
  // TODO: colorscheme for LOR coloring
  //var color = d3.scaleOrdinal(data.map(d => d[1]), d3.schemeCategory10).unknown("red");
  //const col = d3.map(data, (d) => color(d[1]));

  //let [minYear, maxYear] = [2011, 2014];
  //var dataTime = d3.range(minYear, maxYear+1);
  //var currentYear = minYear;

  // function returning the visitor number of a datapoint for the given year
  //function yearMapper(zahlen, year) {
  //  return zahlen.find((ls) => year == ls[0])[1]
  //}

  // radius function handling NaN's
  /*

  function makeRadius(zahlen) {
    const value = yearMapper(zahlen, currentYear)
    return isNaN(value) ? 0.5 : radius(value);
  }*/

  //const maxLorAccidents = d3.max(V.map(zahlen => Math.max(...zahlen.map(tup => isNaN(tup[1]) ? 0 : tup[1]))))
  // Compute default domains.
  //if (domain === undefined) domain = [1, maxLorAccidents];

  // TODO: Use accident number Colorscale. Construct scales.
  //const radius = scale(domain, [1, maxRadius]);

  // Compute the default height. If an outline object is specified, scale the projection to fit
  // the width, and then compute the corresponding height.
  if (height === undefined) {
    if (outline === undefined) {
      height = 400;
    } else {
      const [[x0, y0], [x1, y1]] = d3.geoPath(projection.fitWidth(width, outline)).bounds(outline);
      const dy = Math.ceil(y1 - y0), l = Math.min(Math.ceil(x1 - x0), dy);
      projection.scale(projection.scale() * (l - 1) / l).precision(0.2);
      height = dy;
    }
  }

  // zoom out to see the full map
  function reset() {
    states.transition().style("fill", null);
    svg.transition().duration(750).call(
      zoom.transform,
      d3.zoomIdentity,
      d3.zoomTransform(svg.node()).invert([width / 2, height / 2])
    );
  }

  // click on a district to focus on it
  function clickDistrict(event, d) {
    if (d.focused !== undefined && d.focused === true) {
      reset()
      d.focused = false;
      return
    }
    // else
    d.focused = true;
    const [[x0, y0], [x1, y1]] = path.bounds(d);
    event.stopPropagation();
    states.transition().style("fill", null);
    d3.select(this).transition().style("fill", "#cecece");
    svg.transition().duration(750).call(
      zoom.transform,
      d3.zoomIdentity
        .translate(width / 2, height / 2)
        .scale(Math.min(8, 0.9 / Math.max((x1 - x0) / width, (y1 - y0) / height)))
        .translate(-(x0 + x1) / 2, -(y0 + y1) / 2),
      d3.pointer(event, svg.node())
    );
  }

  // zoom execution function, save new zoom and rescale map and accidentDots
  function zoomed(event) {
    const {transform} = event;
    g.attr("transform", transform);
    g.attr("stroke-width", 1 / transform.k);
    g.attr("currentZoom", transform.k)
    accidentDots
      .attr("r", i => 4 / transform.k)
      .attr("stroke-width", 2 / transform.k);
      // TODO: Change opacity if zoomed out a lot
    // TODO: remove colors of LORs when zoomed in
  }

  const zoom = d3.zoom()
      .scaleExtent([1, 100])
      .on("zoom", zoomed);

  // Construct a path generator.
  const path = d3.geoPath(projection);

  // create a vector graphic object, reset on click
  const svg = d3.select("#content").append("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [0, 0, width, height])
      .attr("style", "width: 100%; height: auto; height: intrinsic;");

  if (outline != null) svg.append("path")
      .attr("fill", "white")
      .attr("stroke", "currentColor")
      .attr("d", path(outline));

  // dummy rectangle, preventing that a click on the legend is propagated to the global svg too
  // https://stackoverflow.com/questions/70262042/d3-svg-click-event-and-circle-click-event-overlapping
  const bg = svg.append("rect")
    .attr("width", width)
    .attr("height", height)
    .attr("fill", "white")
    .on("click", reset);

  // a global graph object, that we add the legend, states, borders, accidentDots to
  const g = svg.append("g")
      .attr("currentZoom", 1);

  // LOR objects that are clickable to zoom into a state
  const states = g.append("g")
      .attr("fill", backgroundFill)
      .attr("cursor", "pointer")
      .selectAll("path")
      .data(topojson.feature(topo, topo.objects.states).features)
      .join("path")
      .on("click", clickDistrict)
      .attr("d", path)
      .on("mouseover", function(d) {
          d3.select(this).selectAll("title").transition().duration(200).style("opacity", .8);
      })
      .on("mouseout", function(d) {
        d3.select(this).selectAll("title").transition().duration(200).style("opacity", 0.05);
      })
      .attr("cursor", "pointer");

  states.append("title")
      .classed("tooltip", true)
      .text(d => d.properties.id);

  states.append("text")
      .text(d => d.properties.id);

  // district borders
  if (borders != null) g.append("path")
      .attr("pointer-events", "none")
      .attr("fill", "none")
      .attr("stroke", backgroundStroke)
      .attr("stroke-linecap", backgroundStrokeLinecap)
      .attr("stroke-linejoin", backgroundStrokeLinejoin)
      .attr("stroke-width", backgroundStrokeWidth)
      .attr("stroke-opacity", backgroundStrokeOpacity)
      .attr("d", path(borders));

  // the bubble size legend showing bubble sizes and their corresponding visitor numbers
  /*
  const legend = svg.append("g")
      .attr("fill", "#777")
      .attr("transform", `translate(${legendX},${legendY})`)
      .attr("text-anchor", "middle")
      .style("font", "10px sans-serif")
      .selectAll("g")
      .data([50000, 400000, 1000000])
      //.data(radius.ticks(4).slice(1))
      .join("g");


  legend.append("circle")
      .attr("fill", "none")
      .attr("stroke", "#ccc")
      .attr("cy", d => -radius(d))
      .attr("r", radius);

  legend.append("text")
      .attr("y", d => -2 * radius(d))
      .attr("dy", "1.3em")
      //.text(radius.tickFormat(4, "s"));
      .text(d => (d == 50000) ? "50k" : d == 400000 ? "0.4M" : "1M")

  // TODO: Make this the color legend
  const legendWidth = 190
  const categoryLegendG = svg.append('g')
    .attr('transform', `translate(${width-legendWidth},20)`);


  categoryLegendG.call(colorLegend, {
    colorScale: color,
    circleRadius: 8,
    spacing: 20,
    textOffset: 12,
    backgroundRectWidth: legendWidth
  });


  categoryLegendG.selectAll(".legend")
      .on("click", function(_event, d) {
        const thisLegend = d3.select(this);
        const isHidden = thisLegend.style("opacity") == 0.1;
        const cat = thisLegend.attr("category");
        thisLegend
          .transition()
          .duration(200)
          .style("opacity", isHidden ? 0.8 : 0.1);
        accidentDots.filter(i => C[i] === cat)
          .style("visibility", i => isHidden ? "visible" : "hidden");
      })
      .on("contextmenu", function (event, i) {
        event.preventDefault();
        // react on right-clicking
        const thisLegend = d3.select(this);
        const cat = thisLegend.attr("category");
        // set only accidentDots of selected category to visible
        accidentDots.filter(i => C[i] === cat)
          .style("visibility", "visible");
        // hide all other accidentDots
        accidentDots.filter(i => C[i] !== cat)
          .style("visibility", "hidden");
        // "hide" all other legend entries
        categoryLegendG.selectAll(".legend")
          .style("opacity", d_ => d_ === cat ? 0.8 : 0.1)
      });
  */

  // a tooltip that is shown near the bubble that we hover over, displaying information about the data point
  // TODO show accident info
  var tooltip = d3.select("#content").append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);

  // create the accidentDots object, with stroke, colors, position, radius, and further attributes
  var accidentDots = g.append("g")
      .attr("fill-opacity", fillOpacity)
      //.attr("stroke", stroke)
      .attr("stroke-width", 2)
      //.attr("stroke-opacity", strokeOpacity)
      .attr("cursor", "pointer")
      .selectAll("circle")
      .data(d3.range(data.length)
        .filter(i => P[i]))
      .join("circle")
      .attr("transform", projection == null
        ? i => `translate(${P[i]})`
        : i => `translate(${projection(P[i])})`)
      .attr("r", 4)
      //.attr("fill", i => col[i])
      //.attr("stroke", i => col[i])
      .attr("top-left", i => projection(P[i])) // custom attr, we need for the tooltip
  	  .attr("info", i => JSON.stringify(I[i])) // save all info in a json string to be parsed in the tooltip

  // tooltip setting when hovering over accidentDots
  // TODO: Show accident info on hover
  //test
  accidentDots
      .on("mouseover", function(d) {
        tooltip.transition().duration(200).style("opacity", .9);
        const accident = d3.select(this);
        // TODO: take into account current zoom and zoom position

        var pos = accident.attr("top-left").split(",")
        console.log(pos)
        const [x, y] = [parseFloat(pos[0]) + document.getElementById("content").offsetLeft,
                  parseFloat(pos[1]) + document.getElementById("content").offsetTop]

        //const v = parseInt(accident.attr("visitors"));
        //const visitorText = "Besucher:innen: " + (isNaN(v) ? "Keine Zahlen" : v.toLocaleString("de-DE"));

        const info = JSON.parse(accident.attr("info"))
        const persons = "<b>Beteiligte:</b> " + info.Beteiligte.join(", ")
        const dateTime = "<b>Monat:</b> " + info.UMONAT + "; <b>Wochentag:</b> " + info.UWOCHENTAG + "; <b>Stunde:</b> " + info.USTUNDE;
        const gs = ["Tödlich", "Schwer", "Leicht"]
        const graveness = "<b>Schweregrad:</b> " + gs[info.UKATEGORIE - 1]
        const accidentTypes = ["Fahrunfall", "Abbiegeunfall", "Einbiegen / Kreuzen-Unfall",
                              "Überschreiten-Unfall", "Unfall durch ruhenden Verkehr",
                              "Unfall im Längsverkehr", "sonstiger Unfall"]
        tooltip.html(d)
          .style("left", x + "px")
          .style("top", y + "px")
          .html("<b>"+accidentTypes[info.UTYP1 - 1]+"</b><br>"
               + dateTime + "<br>"
               + persons + "<br>"
               + graveness + "<br>");
      })
      .on("mouseout", function(d) {
        tooltip.transition().duration(500).style("opacity", 0);
      });


  // callback of change in selected data, changes visibility
  function updateVisibleDots() {
    const currentZoom = g.attr("currentZoom");
    accidentDots
      //.attr("visitors", i => yearMapper(V[i], currentYear)) // has to be set before the transition
      .transition()
      .duration(500);
      // TODO: change visibility if necessary
      //.attr("r", i => makeRadius(V[i]) / currentZoom) // scale radius by the current zoom
  }

  svg.call(zoom);
  //return Object.assign(svg.node(), {scales: {radius}});
}
# %% [javascript]

# %% [javascript]
function removeAllChildren(name) {
  const div = document.getElementById(name);
  let child = div.lastElementChild;
  while (child !== null) {
    div.removeChild(child);
    child = div.lastElementChild;
  }
}

// remove old map on reload
removeAllChildren("content");

// use this projection (found on https://stackoverflow.com/questions/73779158/how-can-i-translate-position-of-d3-symbol-on-wsg84-coropleth-map)
var projection = d3.geoIdentity()
  .reflectY(true)
  .fitSize([1500, 1000], topojson.feature(berlin_lor_topo, berlin_lor_topo.objects.states))

var chart = AccidentMap(data, {
  borders: statemesh,
  projection: projection,
  topo: berlin_lor_topo,
  width: 1500,
  height: 1000
})

console.log(chart);
# %% [markdown]

# %% [markdown]
### Sorted Bar chart category
# %% [html]
<div id="test"></div>

# %% [javascript]
removeAllChildren("test");
chart = BarChart(bar_data, {
  x: d => d.category, // x axis -> category
  y: d => d.count, // counts
  xDomain: d3.groupSort(bar_data, ([d]) => -d.count, d => d.category), // sort by descending frequency
  yLabel: "↑ Anzahl",
  width: 400,
  height: 200, // think about deceptive design
  //title: "Gesamtanzahl der Unfälle per Beteiligte",
})
# %% [javascript]
// Copyright 2021 Observable, Inc.
// Released under the ISC license.
// https://observablehq.com/@d3/bar-chart
function BarChart(data, {
  x = (d, i) => i, // given d in data, returns the (ordinal) x-value
  y = d => d, // given d in data, returns the (quantitative) y-value
  title, // given d in data, returns the title text
  marginTop = 20, // the top margin, in pixels
  marginRight = 0, // the right margin, in pixels
  marginBottom = 30, // the bottom margin, in pixels
  marginLeft = 40, // the left margin, in pixels
  width = 640, // the outer width of the chart, in pixels
  height = 400, // the outer height of the chart, in pixels
  xDomain, // an array of (ordinal) x-values
  xRange = [marginLeft, width - marginRight], // [left, right]
  yType = d3.scaleLinear, // y-scale type
  yDomain, // [ymin, ymax]
  yRange = [height - marginBottom, marginTop], // [bottom, top]
  xPadding = 0.1, // amount of x-range to reserve to separate bars
  yFormat, // a format specifier string for the y-axis
  yLabel, // a label for the y-axis
  color = "currentColor", // bar fill color
  titleColor = "black", // title fill color when atop bar
  titleAltColor = "currentColor", // title fill color when atop background
} = {}) {
  // Compute values.
  const X = d3.map(data, x);
  const Y = d3.map(data, y);

  // Compute default domains, and unique the x-domain.
  if (xDomain === undefined) xDomain = X;
  if (yDomain === undefined) yDomain = [0, d3.max(Y)];
  xDomain = new d3.InternSet(xDomain);

  // Omit any data not present in the x-domain.
  const I = d3.range(X.length).filter(i => xDomain.has(X[i]));

  // Construct scales, axes, and formats.
  const xScale = d3.scaleBand(xDomain, xRange).padding(xPadding);
  const yScale = yType(yDomain, yRange);//d3.scaleBand(yDomain, yRange);
  const xAxis = d3.axisBottom(xScale).tickSizeOuter(0);
  const yAxis = d3.axisLeft(yScale).ticks(height / 40, yFormat);
  // setted color can be changed by using another schemeCategory
  var color = d3.scaleOrdinal(data.map(d => d.category), d3.schemeCategory10).unknown("red");
  const col = d3.map(data, (d) => color(d.category));

  // Compute titles.
 if (title === undefined) {
    const formatValue = yScale.tickFormat(100, yFormat);
    title = i => `${X[i]}\n${formatValue(Y[i])}`;
  } else {
    const O = d3.map(data, d => d);
    const T = title;
    title = i => T(O[i], i, data);
  }

  const svg = d3.select("#test").append("svg")
    .attr("width", width)
    .attr("height", height)
    .attr("viewBox", [0, 0, width, height])
    .attr("style", "max-width: 100%; height: auto; height: intrinsic;");

  svg.append("g")
      .attr("transform", `translate(${marginLeft},0)`)
	  .call(yAxis)
      .call(g => g.select(".domain").remove())
      .call(g => g.selectAll(".tick line").clone()
          .attr("x2", width - marginLeft - marginRight)
          .attr("stroke-opacity", 0.1))
      .call(g => g.append("text")
          .attr("x", -marginLeft)
          .attr("y", 10)
          .attr("fill", "currentColor")
          .attr("text-anchor", "start")
          .text(yLabel));
  
  const bar = svg.append("g")
    .selectAll("rect")
    .data(I)
    .join("rect")
      .attr("x", i => xScale(X[i]))
      .attr("y", i => yScale(Y[i]))
      .attr("height", i => yScale(0) - yScale(Y[i]))
      .attr("width", xScale.bandwidth())
	  .attr("fill", i => col[i]);
  
  if (title) bar.append("title")
      .text(title);

svg.append("g")
      .attr("fill", "currentColor")
      .attr("text-anchor", "end")
      .attr("font-family", "sans-serif")
      .attr("font-size", 10)
    .selectAll("text")
    .data(I)
    .join("text")
      .attr("y", i => yScale(Y[i]))
      .attr("x", i => xScale(X[i]) + xScale.bandwidth() / 2 + 6)
      .attr("dy", "0.35em")
      .attr("dx", -4)
      .text(title)
      .call(text=> text.filter(i => yScale(Y[i]) - yScale(0) < 20) // short bars
          .attr("dy", +4)
          .attr("fill", titleAltColor)
          .attr("text-anchor", "start"));
  
svg.append("g")
      .attr("transform", `translate(0,${height - marginBottom})`)
      .call(xAxis);
  
  return svg.node();
}
# %% [javascript]
// helper functions to model data as needed
function get_data_object_bar_chart(data, number_fct) {
  categorys_counts = number_fct(data);
  entries = Object.entries(categorys_counts)
  let data_entry = entries.map(([key, val] = entry) => {
  		return {category: key, count: val};
	});
  return data_entry
}

// returns category without "Ist"
function get_substring(data_dict){
  data_dict.category = data_dict.category.substring(3);
}

// returns category with its meaning
function get_meaning(data_dict){
  cat_graveness_dict = {1: "Tote", 2: "Schwerverletzte", 3: "Leichtverletzte"};
  data_dict.category = cat_graveness_dict[data_dict.category];
}
# %% [javascript]
bar_data = get_data_object_bar_chart(data, getInvolvedNumbers);
bar_data.map(get_substring)
bar_data
# %% [markdown]
## sorted horizontal bar chart graveness
# %% [html]
<div id="test_horizontal"></div>
# %% [javascript]
removeAllChildren("test_horizontal");
chart = BarChartH(bar_data_horizontal, {
  x: d => d.count, // x axis -> counts
  y: d => d.category, // y-axis -> counts
  yDomain: d3.groupSort(bar_data_horizontal, ([d]) => d.count, d => d.category), // sort by descending frequency
  xLabel: "Anzahl →",
  width: 400,
  height: 200, // think about deceptive design
  marginLeft: 80,
  //title: "Gesamtanzahl der Unfälle per Beteiligte",
})
# %% [javascript]
cat_graveness_dict = {1: "Unfall mit Getöteten", 2: "Unfall mit Schwerverletzten", 3: "Unfall mit Leichtverletzten"};
bar_data_horizontal = get_data_object_bar_chart(data, countGraveness);
bar_data_horizontal.map(get_meaning)
bar_data_horizontal
# %% [javascript]
// Copyright 2021 Observable, Inc.
// Released under the ISC license.
// https://observablehq.com/@d3/horizontal-bar-chart
function BarChartH(data, {
  x = d => d, // given d in data, returns the (quantitative) x-value
  y = (d, i) => i, // given d in data, returns the (ordinal) y-value
  title, // given d in data, returns the title text
  marginTop = 30, // the top margin, in pixels
  marginRight = 0, // the right margin, in pixels
  marginBottom = 10, // the bottom margin, in pixels
  marginLeft = 50, // the left margin, in pixels
  width = 640, // the outer width of the chart, in pixels
  height, // outer height, in pixels
  xType = d3.scaleLinear, // type of x-scale
  xDomain, // [xmin, xmax]
  xRange = [marginLeft, width - marginRight], // [left, right]
  xFormat, // a format specifier string for the x-axis
  xLabel, // a label for the x-axis
  yPadding = 0.1, // amount of y-range to reserve to separate bars
  yDomain, // an array of (ordinal) y-values
  yRange, // [top, bottom]
  color = "currentColor", // bar fill color
  titleColor = "white", // title fill color when atop bar
  titleAltColor = "currentColor", // title fill color when atop background
} = {}) {
  // Compute values.
  const X = d3.map(data, x);
  const Y = d3.map(data, y);

  // Compute default domains, and unique the y-domain.
  if (xDomain === undefined) xDomain = [0, d3.max(X)];
  if (yDomain === undefined) yDomain = Y;
  yDomain = new d3.InternSet(yDomain);

  // Omit any data not present in the y-domain.
  const I = d3.range(X.length).filter(i => yDomain.has(Y[i]));

  // Compute the default height.
  if (height === undefined) height = Math.ceil((yDomain.size + yPadding) * 25) + marginTop + marginBottom;
  if (yRange === undefined) yRange = [marginTop, height - marginBottom];

  // Construct scales and axes.
  const xScale = xType(xDomain, xRange);
  const yScale = d3.scaleBand(yDomain, yRange).padding(yPadding);
  const xAxis = d3.axisTop(xScale).ticks(width / 80, xFormat);
  const yAxis = d3.axisLeft(yScale).tickSizeOuter(0);
  var color = d3.scaleOrdinal(data.map(d => d.category), ["red", "orange", "green"]).unknown("grey");
  const col = d3.map(data, (d) => color(d.category));

  // Compute titles.
  if (title === undefined) {
    const formatValue = xScale.tickFormat(100, xFormat);
    title = i => `${formatValue(X[i])}`;
  } else {
    const O = d3.map(data, d => d);
    const T = title;
    title = i => T(O[i], i, data);
  }

  const svg = d3.select("#test_horizontal").append("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [0, 0, width, height])
      .attr("style", "max-width: 100%; height: auto; height: intrinsic;");

  svg.append("g")
      .attr("transform", `translate(0,${marginTop})`)
      .call(xAxis)
      .call(g => g.select(".domain").remove())
      .call(g => g.selectAll(".tick line").clone()
          .attr("y2", height - marginTop - marginBottom)
          .attr("stroke-opacity", 0.1))
      .call(g => g.append("text")
          .attr("x", width - marginRight)
          .attr("y", -22)
          .attr("fill", "currentColor")
          .attr("text-anchor", "end")
          .text(xLabel));

  svg.append("g") 
    .selectAll("rect")
    .data(I)
    .join("rect")
      .attr("x", xScale(0))
      .attr("y", i => yScale(Y[i]))
      .attr("width", i => xScale(X[i]) - xScale(0))
      .attr("height", yScale.bandwidth())
      .attr("fill", i => col[i]);

 svg.append("g")
      .attr("fill", titleColor)
      .attr("text-anchor", "end")
      .attr("font-family", "sans-serif")
      .attr("font-size", 10)
    .selectAll("text")
    .data(I)
    .join("text")
      .attr("x", i => xScale(X[i]))
      .attr("y", i => yScale(Y[i]) + yScale.bandwidth() / 2)
      .attr("dy", "0.35em")
      .attr("dx", -4)
      .text(title)
      .call(text => text.filter(i => xScale(X[i]) - xScale(0) < 20) // short bars
          .attr("dx", +4)
          .attr("fill", titleAltColor)
          .attr("text-anchor", "start"));

  svg.append("g")
      .attr("transform", `translate(${marginLeft},0)`)
      .call(yAxis);

  return svg.node();
}
# %% [markdown]
## Violin plot for amount of crash per days and hour

* https://d3-graph-gallery.com/graph/violin_jitter.html

\

# %% [javascript]
function hist_all_over(data, histogram) {
  sorted_data = data.slice().sort((a, b) => d3.ascending(a.UWOCHENTAG, b.UWOCHENTAG));
  data_grouped = d3.group(sorted_data,  d => d.UWOCHENTAG);
  bins = Array.from(data_grouped).map(d => d[1].map(d => d.USTUNDE)).map(histogram);
  return bins
};

categories = ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"]
function swap_days_to_starting_at_monday(data){
  data.map(function(d){
  	d.UWOCHENTAG = categories[d.UWOCHENTAG - 1];
  });
  return data;
}
# %% [html]
<div id="test_violin"></div>
# %% [javascript]
removeAllChildren("test_violin");
RaincloudPlot(data)
# %% [javascript]
function RaincloudPlot(data) {
// Build and Show the Y scale

// set the dimensions and margins of the graph
var margin = {top: 20, right: 30, bottom: 10, left: 110},
    width = 1000 - margin.left - margin.right,
    height = 750; // - margin.top - margin.bottom;

var x = d3.scaleLinear()
  .domain([0, 24])          // Note that here the Y scale is set manually // days
  .range([0, width])
  
// Build and Show the X scale. It is a band scale like for a boxplot: each group has an dedicated RANGE on the axis. This range has a length of x.bandwidth
var y = d3.scaleBand()
  .range([0, height])
  .domain([1, 2, 3, 4, 5, 6, 7]) //days
  .padding(0)     // This is important: it is the space between 2 groups. 0 means no padding. 1 is the maximum.

categories = ["Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag"]
// Create the Y axis for names
var yName = d3.scaleBand()
  .domain(categories)
  .range([0, height])
  .paddingInner(0)
  
// Features of the histogram
var histogram = d3.histogram()
      .domain(x.domain())
      .thresholds(x.ticks(24))    // Important: how many bins approx are going to be made? It is the 'resolution' of the violin plot
      .value(d => d)
  
// Compute the binning for each group of the dataset and shift Sunday to be day 7
var sumstat = hist_all_over(data, histogram);
sumstat.push(sumstat[0])
sumstat.shift()

// What is the biggest number of value in a bin? We need it cause this value will have a width of 100% of the bandwidth.
var maxNum = 0
for ( i in sumstat ){
  allBins = sumstat[i]
  lengths = allBins.map(function(a){return a.length;})
  longuest = d3.max(lengths)
  if (longuest > maxNum) { maxNum = longuest }
}

// adapt data structure inner array to dict
help_array = [1, 2, 3, 4, 5, 6, 7];
for ( i in sumstat ){
  var dict =  {};
  dict[help_array[i]] = sumstat[i];
  sumstat[i] = dict;
}

// The maximum width of a violin must be x.bandwidth = the width dedicated to a group
var yNum = d3.scaleLinear()
  .range([0, y.bandwidth()])
  .domain([-maxNum, maxNum])

// append the svg object to the body of the page
const svg = d3.select("#test_violin")
  .append("svg")
    .attr("width", width)// + margin.left + margin.right)
    .attr("height", height)// + margin.top + margin.bottom)
  	.attr("viewBox", [-80, 0, width + 200, height + 30])
    .attr("style", "max-width: 100%; height: auto; height: intrinsic;");
  
svg.append("g")
   .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// add x-axis
svg.append("g")	
  .attr("transform", "translate(0," + height + ")") 
  .call(d3.axisBottom(x))

// add x-label 
svg.append("text")
      .attr("text-anchor", "end")
      .attr("x", width + 80)
      .attr("y", height + 5)
  	  .style("fill", "grey")
      .text("Uhrzeit →");

// add Days to yaxis 
svg.append("g")
  .call(d3.axisLeft(yName).tickSize(0))
  .select(".domain").remove()

// Add the shape to this svg!
svg.append("g")
.selectAll("myViolin")
.data(sumstat)
.enter()        // So now we are working group per group
.append("g")
  .append("path") // append elemnt
    .attr("transform", function(d){return("translate(0, " + (y(parseInt(Object.keys(d)[0])))+")")} ) // - verschiebung y axe
    .datum(function(d){return(Object.values(d)[0])})     // So now we are working bin per bin
    .style("stroke", "none")
    .style("fill","grey")
    .attr("d", d3.area()
        .x(function(d){return(x(d.x0)) })
        .y0(function(d){return yNum(-d.length)}) // - => upper violin
        .y1(yNum(0)) // cuts half of the violin
        .curve(d3.curveCatmullRom)    // This makes the line smoother to give the violin appearance. Try d3.curveStep to see the difference
    )

  return svg.node();
}
