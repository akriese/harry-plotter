# %% [esm]
import * as tj from "https://cdn.skypack.dev/pin/topojson@v3.0.2-ovpHjX420lx9YlKkg1QF/mode=imports/optimized/topojson.js"
import * as d3_ from "https://cdn.skypack.dev/d3@7.6.0"
export const topojson = tj;
export const d3 = d3_;

# %% [javascript]
async function fetchJson(url) {
  return await fetch(url).then(response => response.json())
}

var data = await fetchJson("https://raw.githubusercontent.com/akriese/harry-plotter/main/sprint_02/data/data_2021.json")

// district features https://tsb-opendata.s3.eu-central-1.amazonaws.com/lor_bezirksregionen_2021/lor_bezirksregionen_2021.geojson
var berlin_lor_topo = await fetchJson("https://raw.githubusercontent.com/akriese/harry-plotter/main/sprint_02/data/lor_bezirksregionen_2021.topojson")
berlin_lor_topo

# %% [javascript]
data[0]
# %% [javascript]
/// Collection of functions that grab certain parts of the given data

// get numbers of how many accidents had e.g. cars involved
function getInvolvedNumbers(data) {
  var involved = ["IstRad", "IstPkw", "IstFuss", "IstKrad", "IstGkfz", "IstSonstige"]
  var results = {}
  for (x of involved) {
    results[x] = 0
  }

  for (accident of data) {
    for (x of involved) {
      results[x] += accident[x] ? 1 : 0
    }
  }

  return results
}


/// Apply a filter on the overall data and return the chosen set
function filterData(data, {
  lor = undefined, // int describing the focused lor; undefined means the whole city is focused
  days = [], // list of ints, representing week days of chosen accidents; empty list means no filter
  graveness = undefined, // int describing the chosen accidents with certain graveness (1,2,3); undefined means no filter
  involved = [] // list of strings, which kind parties are involved in an accident; empty means no filter
}) {
  return data.filter(
    accident => {
      if (lor !== undefined && accident.lor !== lor) {
        return false
      }

      if (days.length != 0 && !(accident.UWOCHENTAG in days)) {
        return false
      }

      if (graveness !== undefined && accident.UKATEGORIE != graveness) {
        return false
      }

      if (involved.length != 0) {
        var skip = false
        for (inv of involved) {
          if (!accident[inv]) {
            skip = true
            break
          }
        }

        // if some required entity is not involved, we continue
        if (skip) {
          return false
        }
      }

      return true
    }
  );
}
# %% [javascript]
// trying out the filter function
function measureFiltering(filter) {
  console.time()
  var result = filterData(data, filter)
  console.timeEnd()
  console.log(result.length)
  return result
}

measureFiltering({ graveness: 1 })
measureFiltering({ graveness: 2, involved: ["IstRad", "IstKrad"] })
measureFiltering({ graveness: 2, involved: ["IstRad"], days: [1,2,5,6] })
measureFiltering({ graveness: 2, days: [1,2,5,6] })
getInvolvedNumbers(measureFiltering({ graveness: 1, involved: ["IstRad"], days: [1,2,5,6] }))


# %% [javascript]
var berlin = {
  type: "FeatureCollection",
  features: [
    {
      type: "Feature",
      properties: {},
      geometry: topojson.merge(berlin_lor_topo, berlin_lor_topo.objects.states.geometries)
    }
  ]
}
berlin
# %% [javascript]
// statemesh should work as it looks like in the bubble map example
statemesh = topojson.mesh(berlin_lor_topo, berlin_lor_topo.objects.states, (a, b) => a !== b)
# %%--- [html]
# properties:
#   top_hidden: true
# ---%%
<!-- Main div for the map svg -->
<div id="content"></div>

<!-- We need this stylesheet for the slider below. -->
<link
  rel="stylesheet"
  href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
  integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO"
  crossorigin="anonymous"
/>
<!-- Slider div -->
<div class="row align-items-center">
  <div class="col-sm"><div id="slider-time"></div></div>
</div>
# %%--- [css]
# properties:
#   top_hidden: true
# ---%%
body {
  font-family: "Helvetica Neue", Helvetica, sans-serif;
  font-size: 14px;
  color: #333;
}

div.tooltip {
  position: absolute;
  text-align: center;
  width: fit-content;
  height: fit-content;
  padding: 2px;
  font: 12px sans-serif;
  background: lightsteelblue;
  border: 0px;
  border-radius: 8px;
  pointer-events: none;
}

.axis text,
.slider text {
  font: 13px sans-serif;
}
.slider text {
  font-weight: bold;
}

/* Style of category legend text and circles */
.legend text {
  font-size: 0.8em;
  fill: black;
  font-family: sans-serif;
}

.legend circle {
  stroke: black;
  stroke-opacity: 0.5;
}
# %% [javascript]
colorLegend = (selection, props) => {
  const {
    colorScale,
    circleRadius,
    spacing,
    textOffset,
    backgroundRectWidth
  } = props;

  const backgroundRect = selection.selectAll('rect')
    .data([null]);
  const n = colorScale.domain().length;
  backgroundRect.enter().append('rect')
    .merge(backgroundRect)
      .attr('x', -circleRadius * 2)
      .attr('y', -circleRadius * 2)
      .attr('rx', circleRadius * 2)
      .attr('width', backgroundRectWidth)
      .attr('height', spacing * n + circleRadius * 2)
      .attr('fill', 'white')
      .attr('opacity', 0.8);

  const groups = selection.selectAll('.legend')
    .data(colorScale.domain());
  const groupsEnter = groups
    .enter().append('g')
      .attr('class', 'legend')
      .attr('category', d => d)
      .style("opacity", 0.8);
  groupsEnter
    .merge(groups)
      .attr('transform', (d, i) =>
        `translate(0, ${i * spacing})`
      )
      .attr("cursor", "pointer");
  groups.exit().remove();

  groupsEnter.append('circle')
    .merge(groups.select('circle'))
      .attr('r', circleRadius)
      .attr('fill', colorScale);

  groupsEnter.append('text')
    .merge(groups.select('text'))
      // cut off long category names
      .text(d => d.length > 29 ? d.substr(0, 27) + '...' : d)
      .attr('dy', '0.32em')
      .attr('x', textOffset);
}
# %% [javascript]
// Copyright 2022 Observable, Inc.
// Released under the ISC license.
// https://observablehq.com/@d3/bubble-map
function Map(data, {
  position = d => d, // given d in data, returns the [longitude, latitude]
  value = () => undefined, // given d in data, returns the quantitative value
  cat = () => undefined,
  title, // given a datum d, returns the hover text
  scale = d3.scaleSqrt, //d3.scaleLog, // type of radius scale
  domain, // [0, max] values; input of radius scale; must start at zero
  maxRadius = 30, // maximum radius of bubbles
  width = 640, // outer width, in pixels
  height, // outer height, in pixels
  projection, // a D3 projection; null for pre-projected geometry
  borders, // a GeoJSON object for stroking borders
  outline = projection && projection.rotate ? {type: "Sphere"} : null, // a GeoJSON object for the background
  backgroundFill = "#e0e0e0", // fill color for background
  backgroundStroke = "white", // stroke color for borders
  backgroundStrokeWidth, // stroke width for borders
  backgroundStrokeOpacity, // stroke width for borders
  backgroundStrokeLinecap = "round", // stroke line cap for borders
  backgroundStrokeLinejoin = "round", // stroke line join for borders
  //fill = d => d,// = "brown", // fill color for bubbles
  fillOpacity = 0.5, // fill opacity for bubbles
  stroke = "white", // stroke color for bubbles
  strokeWidth = 0.5, // stroke width for bubbles
  strokeOpacity, // stroke opacity for bubbles
  legendX = width - maxRadius - 10,
  legendY = height - 10,
} = {}) {
  // Compute values.
  const I = d3.map(data, (_, i) => i);
  const V = d3.map(data, value);//.map(d => d == null ? NaN : +d);
  const P = d3.map(data, position);
  const T = title == null ? null : d3.map(data, title);
  const C = d3.map(data, d => d[1])
  var color = d3.scaleOrdinal(data.map(d => d[1]), d3.schemeCategory10).unknown("red");
  const col = d3.map(data, (d) => color(d[1]));

  let [minYear, maxYear] = [2011, 2014];
  var dataTime = d3.range(minYear, maxYear+1);
  var currentYear = minYear;

  // function returning the visitor number of a datapoint for the given year
  function yearMapper(zahlen, year) {
    return zahlen.find((ls) => year == ls[0])[1]
  }

  // radius function handling NaN's
  function makeRadius(zahlen) {
    const value = yearMapper(zahlen, currentYear)
    return isNaN(value) ? 0.5 : radius(value);
  }

  const maxVisitors = d3.max(V.map(zahlen => Math.max(...zahlen.map(tup => isNaN(tup[1]) ? 0 : tup[1]))))
  // Compute default domains.
  if (domain === undefined) domain = [1, maxVisitors];

  // Construct scales.
  const radius = scale(domain, [1, maxRadius]);

  // Compute the default height. If an outline object is specified, scale the projection to fit
  // the width, and then compute the corresponding height.
  if (height === undefined) {
    if (outline === undefined) {
      height = 400;
    } else {
      const [[x0, y0], [x1, y1]] = d3.geoPath(projection.fitWidth(width, outline)).bounds(outline);
      const dy = Math.ceil(y1 - y0), l = Math.min(Math.ceil(x1 - x0), dy);
      projection.scale(projection.scale() * (l - 1) / l).precision(0.2);
      height = dy;
    }
  }

  // zoom out to see the full map
  function reset() {
    states.transition().style("fill", null);
    svg.transition().duration(750).call(
      zoom.transform,
      d3.zoomIdentity,
      d3.zoomTransform(svg.node()).invert([width / 2, height / 2])
    );
  }

  // click on a district to focus on it
  function clickDistrict(event, d) {
    const [[x0, y0], [x1, y1]] = path.bounds(d);
    event.stopPropagation();
    states.transition().style("fill", null);
    d3.select(this).transition().style("fill", "#cecece");
    svg.transition().duration(750).call(
      zoom.transform,
      d3.zoomIdentity
        .translate(width / 2, height / 2)
        .scale(Math.min(8, 0.9 / Math.max((x1 - x0) / width, (y1 - y0) / height)))
        .translate(-(x0 + x1) / 2, -(y0 + y1) / 2),
      d3.pointer(event, svg.node())
    );
  }

  // zoom execution function, save new zoom and rescale map and bubbles
  function zoomed(event) {
    const {transform} = event;
    g.attr("transform", transform);
    g.attr("stroke-width", 1 / transform.k);
    g.attr("currentZoom", transform.k)
    bubbles
      .attr("r", i => makeRadius(V[i]) / transform.k)
      .attr("stroke-width", strokeWidth / transform.k)
  }

  const zoom = d3.zoom()
      .scaleExtent([1, 10])
      .on("zoom", zoomed);

  // Construct a path generator.
  const path = d3.geoPath(projection);

  // create a vector graphic object, reset on click
  const svg = d3.select("#content").append("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [0, 0, width, height])
      .attr("style", "width: 100%; height: auto; height: intrinsic;");

  if (outline != null) svg.append("path")
      .attr("fill", "white")
      .attr("stroke", "currentColor")
      .attr("d", path(outline));

  // dummy rectangle, preventing that a click on the legend is propagated to the gloabl svg too
  // https://stackoverflow.com/questions/70262042/d3-svg-click-event-and-circle-click-event-overlapping
  const bg = svg.append("rect")
    .attr("width", width)
    .attr("height", height)
    .attr("fill", "white")
    .on("click", reset);

  // a global graph object, that we add the legend, states, borders, bubbles to
  const g = svg.append("g")
      .attr("currentZoom", 1);

  // district objects that are clickable to zoom into a state
  const states = g.append("g")
      .attr("fill", backgroundFill)
      .attr("cursor", "pointer")
      .selectAll("path")
      .data(topojson.feature(berlin_topo, berlin_topo.objects.states).features)
      .join("path")
      .on("click", clickDistrict)
      .attr("d", path)
      .on("mouseover", function(d) {
          d3.select(this).selectAll("title").transition().duration(200).style("opacity", .8);
      })
      .on("mouseout", function(d) {
        d3.select(this).selectAll("title").transition().duration(200).style("opacity", 0.05);
      })
      .attr("cursor", "pointer");

  states.append("title")
      .classed("tooltip", true)
      .text(d => d.properties.id);

  states.append("text")
      .text(d => d.properties.id);

  // district borders
  if (borders != null) g.append("path")
      .attr("pointer-events", "none")
      .attr("fill", "none")
      .attr("stroke", backgroundStroke)
      .attr("stroke-linecap", backgroundStrokeLinecap)
      .attr("stroke-linejoin", backgroundStrokeLinejoin)
      .attr("stroke-width", backgroundStrokeWidth)
      .attr("stroke-opacity", backgroundStrokeOpacity)
      .attr("d", path(borders));

  // the bubble size legend showing bubble sizes and their corresponding visitor numbers
  const legend = svg.append("g")
      .attr("fill", "#777")
      .attr("transform", `translate(${legendX},${legendY})`)
      .attr("text-anchor", "middle")
      .style("font", "10px sans-serif")
      .selectAll("g")
      .data([50000, 400000, 1000000])
      //.data(radius.ticks(4).slice(1))
      .join("g");

  legend.append("circle")
      .attr("fill", "none")
      .attr("stroke", "#ccc")
      .attr("cy", d => -radius(d))
      .attr("r", radius);

  legend.append("text")
      .attr("y", d => -2 * radius(d))
      .attr("dy", "1.3em")
      //.text(radius.tickFormat(4, "s"));
      .text(d => (d == 50000) ? "50k" : d == 400000 ? "0.4M" : "1M")

  const legendWidth = 190
  const categoryLegendG = svg.append('g')
    .attr('transform', `translate(${width-legendWidth},20)`);

  categoryLegendG.call(colorLegend, {
    colorScale: color,
    circleRadius: 8,
    spacing: 20,
    textOffset: 12,
    backgroundRectWidth: legendWidth
  });

  categoryLegendG.selectAll(".legend")
      .on("click", function(_event, d) {
        const thisLegend = d3.select(this);
        const isHidden = thisLegend.style("opacity") == 0.1;
        const cat = thisLegend.attr("category");
        thisLegend
          .transition()
          .duration(200)
          .style("opacity", isHidden ? 0.8 : 0.1);
        bubbles.filter(i => C[i] === cat)
          .style("visibility", i => isHidden ? "visible" : "hidden");
      })
      .on("contextmenu", function (event, i) {
        event.preventDefault();
        // react on right-clicking
        const thisLegend = d3.select(this);
        const cat = thisLegend.attr("category");
        // set only bubbles of selected category to visible
        bubbles.filter(i => C[i] === cat)
          .style("visibility", "visible");
        // hide all other bubbles
        bubbles.filter(i => C[i] !== cat)
          .style("visibility", "hidden");
        // "hide" all other legend entries
        categoryLegendG.selectAll(".legend")
          .style("opacity", d_ => d_ === cat ? 0.8 : 0.1)
      });

  // a tooltip that is shown near the bubble that we hover over, displaying information about the data point
  var tooltip = d3.select("#content").append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);

  // create the bubbles object, with stroke, colors, position, radius, and further attributes
  var bubbles = g.append("g")
      .attr("fill-opacity", fillOpacity)
      .attr("stroke", stroke)
      .attr("stroke-width", strokeWidth)
      .attr("stroke-opacity", strokeOpacity)
      .attr("cursor", "pointer")
      .selectAll("circle")
      .data(d3.range(data.length)
        .filter(i => P[i])
        .sort((i, j) => d3.descending(V[i], V[j]))) // probably needed, so that big circles dont cover small ones
      .join("circle")
      .attr("transform", projection == null
        ? i => `translate(${P[i]})`
        : i => `translate(${projection(P[i])})`)
      .attr("r", i => makeRadius(V[i]))
      .attr("fill", i => col[i])
      .attr("stroke", i => col[i])
      .attr("visitors", i => yearMapper(V[i], currentYear)) // custom attr, we need for the tooltip
      .attr("left", i => projection(P[i])[0]) // custom attr, we need for the tooltip
      .attr("top", i => projection(P[i])[1]) // custom attr, we need for the tooltip
      .attr("title", i => T[i]) // custom attr, we need for the tooltip
      .attr("category", i => C[i]); // custom attr, we need for interactive category legend
      //.call(T ? circle => circle.append("title").text(i => T[i]) : () => {});

  // tooltip setting when hovering over bubbles
  bubbles
      .on("mouseover", function(d) {
        tooltip.transition().duration(200).style("opacity", .9);
        const circle = d3.select(this);
        // TODO: take into account current zoom and zoom position
        const [x, y] = [parseFloat(circle.attr("left")) + document.getElementById("content").offsetLeft,
                        parseFloat(circle.attr("top")) + document.getElementById("content").offsetTop]
        const v = parseInt(circle.attr("visitors"));
        const visitorText = "Besucher:innen: " + (isNaN(v) ? "Keine Zahlen" : v.toLocaleString("de-DE"));
        tooltip.html(d)
          .style("left", x + "px")
          .style("top", y + "px")
          .html("<b>"+circle.attr("title")+"</b><br>" + visitorText);
      })
      .on("mouseout", function(d) {
        tooltip.transition().duration(500).style("opacity", 0);
      });


  // callback of the slider onchange, changes the radius of the bubbles accoring to their new values
  function updateYearData() {
    const currentZoom = g.attr("currentZoom");
    bubbles
      .attr("visitors", i => yearMapper(V[i], currentYear)) // has to be set before the transition
      .transition()
      .duration(500)
      .attr("r", i => makeRadius(V[i]) / currentZoom) // scale radius by the current zoom
  }

  // the year slider, onchange changes the displayed year data
  const sliderWidth = 500
  var sliderTime = d3SimpleSlider
      .sliderBottom()
      .min(minYear)
      .max(maxYear)
      .step(1)
      .width(sliderWidth)
      .tickFormat(d3.format('d'))
      .tickValues(dataTime)
      .default(minYear)
      .on('onchange', val => {
        currentYear = val;
        updateYearData()
      });

  // drawing the slider (inside the svg, at the bottom)
  var gTime = svg.append("g")
      .attr('width', width)
      .attr('height', 100)
      .attr('transform', `translate(${width/2-sliderWidth/2},${height-40})`);

  gTime.call(sliderTime);

  // background for slider, making it more visible while zooming
  const timeBBox = gTime.node().getBBox();
  gTime.append("rect").lower()
      .attr("x", timeBBox.x-5)
      .attr("y", timeBBox.y-5)
      .attr("width", timeBBox.width+10)
      .attr("height", timeBBox.height+10)
      .attr("fill", "white")
      .style("opacity", 0.4)
      .attr("rx", 15);

  svg.call(zoom);
  return Object.assign(svg.node(), {scales: {radius}});
}
# %% [javascript]
function removeAllChildren(name) {
  const div = document.getElementById(name);
  let child = div.lastElementChild;
  while (child !== null) {
    div.removeChild(child);
    child = div.lastElementChild;
  }
}

// remove old map on reload
removeAllChildren("content");

var chart = Map(plot_data, {
  value: (data) => data[4], // just return the zahlen entry from plot_data
  cat: ([, category, , , ]) => category,
  position([, , Longitude, Latitude, ]){
    return [Longitude, Latitude];
  },
  title([inst, , , ,]) {
    return inst;
  },
  borders: statemesh,
  projection: d3.geoMercator().fitExtent([[-100, 180],[800, 500]], statemesh),
  width: 900,
  height: 600
})
console.log(chart);

